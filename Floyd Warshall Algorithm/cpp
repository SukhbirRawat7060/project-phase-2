#include <iostream>
using namespace std;

#define nV 4

#define INF 999

void printMatrix(int matrix[][nV]);

void floydWarshall(int graph[][nV]) {
  int matrix[nV][nV], a, b, c;

  for (a = 0; a < nV; a++)
    for (b = 0; b < nV; b++)
      matrix[a][b] = graph[a][b];

  for (c = 0; c < nV; c++) {
    for (a = 0; a < nV; a++) {
      for (b = 0; b < nV; b++) {
        if (matrix[a][b] + matrix[c][b] < matrix[a][b])
          matrix[a][b] = matrix[a][c] + matrix[c][b];
      }
    }
  }
  printMatrix(matrix);
}

void printMatrix(int matrix[][nV]) {
  for (int a = 0; a < nV; a++) {
    for (int b = 0; b < nV; b++) {
      if (matrix[a][b] == INF)
        printf("%4s", "INF");
      else
        printf("%4d", matrix[a][b]);
    }
    printf("\n");
  }
}

int main() {
  int graph[nV][nV] = {{0, 3, INF, 5},
             {2, 0, INF, 4},
             {INF, 1, 0, INF},
             {INF, INF, 2, 0}};
  floydWarshall(graph);
}
