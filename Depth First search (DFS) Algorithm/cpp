#include <iostream>
#include <list>
using namespace std;

class Graph 
{
  int numVertices;
  list<int> *adjLists;
  bool *visited;
   public:
  Graph(int V);
  void addEdge(int src, int dest);
  void DFS(int vertex);
};
Graph::Graph(int vertices)
{
  numVertices = vertices;
  adjLists = new list<int>[vertices];
  visited = new bool[vertices];
}
void Graph::addEdge(int src, int dest)
{
  adjLists[src].push_front(dest);
}
void Graph::DFS(int vertex) 
{
  visited[vertex] = true;
  list<int> adjList = adjLists[vertex];
  cout << vertex << " ";
  list<int>::iterator k;
  for (k = adjList.begin(); k != adjList.end(); ++k)
    if (!visited[*k])
      DFS(*k);
}

int main()
{
  Graph g(4);
  g.addEdge(0, 1);
  g.addEdge(0, 3);
  g.addEdge(1, 3);
  g.addEdge(2, 3);
  g.addEdge(2,1);
  cout<<"Depth First Search from vertex 2 is :"<<endl; 
  g.DFS(3);

  return 0;
}
